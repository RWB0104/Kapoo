# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    tags:
      - root/*
      - blog/*
      - piedit/*

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Repository Checkout
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - uses: pnpm/action-setup@v4
      with:
        version: 8

    - name: Set Target Environment Variable
      id: variable
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}

        if [[ $TAG_NAME == root/* ]]; then
          echo "TARGET=root" >> $GITHUB_OUTPUT
          echo "REPO=itcode.dev" >> $GITHUB_OUTPUT
          echo "BRANCH=main" >> $GITHUB_OUTPUT

        elif [[ $TAG_NAME == blog/* ]]; then
          echo "TARGET=blog" >> $GITHUB_OUTPUT
          echo "REPO=blog.itcode.dev" >> $GITHUB_OUTPUT
          echo "BRANCH=master" >> $GITHUB_OUTPUT

        elif [[ $TAG_NAME == piedit/* ]]; then
          echo "TARGET=piedit" >> $GITHUB_OUTPUT
          echo "REPO=piedit.itcode.dev" >> $GITHUB_OUTPUT
          echo "BRANCH=main" >> $GITHUB_OUTPUT

        else
          echo "‚ùå [$TAG_NAME] is undefined tag name"
          exit 1
        fi
      shell: bash

    - name: Cache dependencies
      id: cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-kapoo-${{ hashFiles('pnpm-lock.yaml') }}
        restore-keys: ${{ runner.os }}-kapoo

    - name: kapoo Dependencies Install
      if: steps.cache.outputs.cache-hit != 'true'
      run: pnpm install

    - name: build ${{ steps.variable.outputs.TARGET }}
      run: pnpm nx build ${{ steps.variable.outputs.TARGET }}

    - name: Pushes to ${{ steps.variable.outputs.TARGET }} Public Repository
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.TOKEN }}
      with:
        source-directory: apps/${{ steps.variable.outputs.TARGET }}/out
        destination-github-username: RWB0104
        destination-repository-name: ${{ steps.variable.outputs.REPO }}
        user-email: psj2716@gmail.com
        target-branch: ${{ steps.variable.outputs.BRANCH }}
        target-directory: docs
        commit-message: "[üöÄ ${{ steps.variable.outputs.TARGET }}] ${{ github.event.head_commit.message }}"
